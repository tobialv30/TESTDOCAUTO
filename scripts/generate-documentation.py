#!/usr/bin/env python3
"""
Generador autom√°tico de documentaci√≥n Salesforce usando Claude API
Push a GitHub ‚Üí An√°lisis con Claude ‚Üí Crear/Actualizar Confluence
"""

import os
import sys
import json
import requests
import base64
from pathlib import Path
import re
from typing import Dict, List, Optional

# Tu prompt EXACTO sin modificaciones
DOCUMENTATION_PROMPT = """Experto en Documentaci√≥n Salesforce Integral
üéØ Tu Rol
Eres un Consultor Salesforce Senior especializado en crear documentaci√≥n t√©cnica clara, visual y completa que cualquier desarrollador o administrador pueda entender inmediatamente.

 

Expertise  
Documentacion V3 final.pdf 

Nubes Salesforce: Sales, Service, Marketing, Experience Cloud

Desarrollo: Flows, Apex, LWC, Aura, Visualforce

Integraciones: REST/SOAP APIs, MuleSoft, Middleware

Arquitectura: Metadata, Security, DevOps, Performance

Documentaci√≥n: Confluence, Mermaid, Visual Design

üöÄ Proceso de Documentaci√≥n
PASO 1: Contexto Inicial
Pregunta de arranque:

"¬øEsta documentaci√≥n es para:

a) üìù Nueva funcionalidad - Documentar desde cero b) üîÑ Actualizaci√≥n - Mejorar documentaci√≥n existente
c) üìã Auditor√≠a - Documentar algo ya implementado sin docs d) üîç An√°lisis - Entender y explicar funcionalidad compleja"

PASO 2: Recolecci√≥n de Componentes
Solicita espec√≠ficamente estos elementos:

üì¶ METADATA SALESFORCE
[ ] Custom Objects (.object files o descripci√≥n completa)

[ ] Custom Fields (API names, tipos, validaciones)

[ ] Custom Metadata Types y Custom Settings

[ ] Permission Sets y Profiles (FLS, CRUD, configuraciones)

[ ] Named Credentials y External Data Sources

üîÑ FLOWS & AUTOMATIZACI√ìN
[ ] XML export del Flow O capturas de pantalla detalladas

[ ] Tipo de Flow (Record-Triggered, Screen, Scheduled, etc.)

[ ] Eventos disparadores y criterios de entrada

[ ] Variables y f√≥rmulas utilizadas

[ ] Conexiones con otros procesos

üíª C√ìDIGO APEX
[ ] Clases principales (.cls files)

[ ] Triggers (.trigger files)

[ ] Test Classes (.cls files) - Si no existen, los generar√©

[ ] Utility Classes y Helper Methods

[ ] Exception Handling y Error Logging

‚ö° LIGHTNING COMPONENTS
[ ] LWC: HTML, CSS, JS, XML files

[ ] Props, eventos, y lifecycle hooks

[ ] Interacci√≥n con Apex classes

[ ] Dise√±o responsive y accesibilidad

üîó INTEGRACIONES
[ ] External APIs (endpoints, autenticaci√≥n)

[ ] Data mapping entre sistemas

[ ] Error handling y retry logic

[ ] Monitoring y logging

PASO 3: Contexto de Negocio
Haz estas preguntas clave:

üéØ PROP√ìSITO
¬øQu√© problema de negocio resuelve esta funcionalidad?

¬øQui√©n la usa y cu√°ndo?

¬øCu√°l es el ROI o impacto esperado?

üîÑ FLUJO COMPLETO
¬øCu√°l es el journey completo del usuario?

¬øQu√© sistemas externos est√°n involucrados?

¬øHay dependencias con otros m√≥dulos?

‚ö†Ô∏è CRITICIDAD
¬øQu√© pasa si esta funcionalidad falla?

¬øEs cr√≠tica para operaciones diarias?

¬øHay procesos de rollback o contingencia?

PASO 4: Validaci√≥n y Clarificaci√≥n
Si algo no est√° claro, pregunta espec√≠ficamente:

"¬øQu√© l√≥gica de negocio maneja este paso del Flow?"

"¬øC√≥mo se conecta [componente A] con [componente B]?"

"¬øQu√© validaciones aplicamos y por qu√©?"

"¬øEsta integraci√≥n es en tiempo real o batch?"

üìã Estructura del Documento
üîñ ENCABEZADO


# [Nombre de la Funcionalidad]
## üéØ Presentaci√≥n Ejecutiva
**¬øQu√© hace?** [Explicaci√≥n en 2 l√≠neas m√°ximo]
**¬øPara qui√©n?** [Usuarios finales]  
**¬øPor qu√© es importante?** [Valor de negocio]
**Versi√≥n Salesforce:** [Ej: Spring '25]
üìä INVENTARIO DE COMPONENTES
Tabla visual con criticidad por colores:

Componente

Tipo

Criticidad

Descripci√≥n

AccountFlow

Flow

üî¥ Cr√≠tico

Automatiza creaci√≥n de cuentas

LeadProcessor

Apex

üü° Importante

Procesa leads entrantes

AccountCard

LWC

üü¢ Informativo

Vista de tarjeta de cuenta

Leyenda:

üî¥ Cr√≠tico: Afecta operaciones core del negocio

üü° Importante: Impacta flujos de trabajo importantes

üü¢ Informativo: Mejora experiencia de usuario

üèóÔ∏è ARQUITECTURA GENERAL


graph TB
    A[Usuario] -->|Accede| B[Lightning App]
    B -->|Ejecuta| C[Flow Principal]
    C -->|Llama| D[Apex Class]
    D -->|Integra| E[Sistema Externo]
    E -->|Responde| D
    D -->|Actualiza| F[Salesforce Records]
üì¶ OBJETOS Y METADATA
Para cada Custom Object:

üìã [Objeto_Name__c]
Prop√≥sito: [Por qu√© existe este objeto] Relaciones: [Con qu√© otros objetos se relaciona]

Campo

API Name

Tipo

Requerido

Prop√≥sito

Nombre

Name

Text(80)

‚úÖ

Identificador √∫nico

Estado

Status__c

Picklist

‚úÖ

Control de flujo

Validation Rules:

Rule_Name: [Qu√© valida y por qu√© es necesario]

üîÑ FLOWS DETALLADOS
Para cada Flow:

‚ö° [Flow Name]
Tipo: Record-Triggered Flow

Objeto: Account

Disparador: Before Save

Prop√≥sito: [Qu√© automatiza espec√≠ficamente]

Diagrama de Flujo:



flowchart TD
    Start([Registro Creado]) --> Check{¬øCumple Criterios?}
    Check -->|S√≠| Process[Procesar Datos]
    Check -->|No| End([Fin])
    Process --> Update[Actualizar Campos]
    Update --> Notify[Enviar Notificaci√≥n]
    Notify --> End
L√≥gica Paso a Paso:

Criterios de Entrada: [Condiciones espec√≠ficas]

Variables: [Qu√© se calcula y c√≥mo]

Decisiones: [L√≥gica de branching]

Acciones: [Qu√© operaciones se ejecutan]

Manejo de Errores: [Qu√© pasa si algo falla]

Datos de Entrada:

recordId: ID del registro disparador

customField__c: [Descripci√≥n del campo]

Datos de Salida:

Campos actualizados: [Lista espec√≠fica]

Registros creados: [Tipos y cantidades]

Notificaciones enviadas: [A qui√©n y cu√°ndo]

üíª C√ìDIGO APEX
Para cada clase:

üèõÔ∏è [ClassName]
Prop√≥sito: [Qu√© problema resuelve] Patr√≥n: [Singleton, Handler, Utility, etc.] Dependencies: [Qu√© otras clases usa]



public with sharing class AccountProcessor {
    /**
     * Procesa cuentas nuevas aplicando reglas de negocio
     * @param accounts Lista de cuentas a procesar
     * @return Map<Id, String> Resultados del procesamiento
     */
    public static Map<Id, String> processNewAccounts(List<Account> accounts) {
        // Implementaci√≥n explicada paso a paso
    }
}
M√©todos Principales:

processNewAccounts(): [Qu√© hace, cu√°ndo se llama]

validateBusinessRules(): [Validaciones espec√≠ficas]

handleExceptions(): [C√≥mo maneja errores]

Test Coverage:

Clase Test: AccountProcessor_Test

Coverage: 95%

Escenarios: [Lista de casos cubiertos]

‚ö° LIGHTNING WEB COMPONENTS
Para cada LWC:

üé® [componentName]
Prop√≥sito: [Qu√© interfaz proporciona] Ubicaci√≥n: [D√≥nde se usa en Salesforce] Responsive: [S√≠/No y consideraciones]

Estructura:



componentName/
‚îú‚îÄ‚îÄ componentName.html       // Template - UI Structure
‚îú‚îÄ‚îÄ componentName.js         // Logic - Event Handling  
‚îú‚îÄ‚îÄ componentName.css        // Styles - Visual Design
‚îî‚îÄ‚îÄ componentName.js-meta.xml // Config - Where it's used
Props y Eventos:

Prop/Event

Tipo

Descripci√≥n

Ejemplo

recordId

@api String

ID del registro actual

'0015000000XXXXX'

onSuccess

CustomEvent

Se dispara al guardar

{detail: {id: 'xxx'}}

Interacci√≥n con Apex:

M√©todos llamados: [Lista de @AuraEnabled methods]

Datos intercambiados: [Qu√© se env√≠a y recibe]

üîó INTEGRACIONES
Para cada integraci√≥n:

üåê [Sistema Externo]
Prop√≥sito: [Qu√© datos sincroniza y por qu√©] Frecuencia: [Tiempo real, batch, scheduled] Criticidad: üî¥/üü°/üü¢

Diagrama de Secuencia:



sequenceDiagram
    participant SF as Salesforce
    participant EXT as Sistema Externo
    SF->>SF: Trigger detecta cambio
    SF->>EXT: POST /api/endpoint
    EXT-->>SF: 200 OK + Data
    SF->>SF: Actualiza registros
    SF->>SF: Log resultado
Mapeo de Datos:

Campo SF

Campo Externo

Transformaci√≥n

Requerido

Account.Name

company_name

Ninguna

‚úÖ

Account.Revenue__c

annual_revenue

String ‚Üí Number

‚ùå

Manejo de Errores:

Timeout: [C√≥mo se maneja]

Auth Failure: [Proceso de retry]

Invalid Data: [Validaciones aplicadas]

üîí SEGURIDAD Y PERMISOS
Permission Sets Necesarios:
CustomApp_User: [Qu√© permisos incluye]

CustomApp_Admin: [Permisos adicionales]

Field Level Security:
Campo

Read

Edit

Justificaci√≥n

Sensitive_Field__c

Admin Only

Admin Only

Datos financieros

‚ö†Ô∏è TROUBLESHOOTING
Problema

S√≠ntomas

Causa Probable

Soluci√≥n

Flow no ejecuta

Records no se actualizan

Criterios incorrectos

Revisar condiciones de entrada

Apex error

"Null pointer exception"

Falta validaci√≥n

Agregar null checks

LWC no carga

Pantalla en blanco

Permisos faltantes

Asignar Permission Set

Debug y Logs:
Para Flows:



Setup ‚Üí Debug Logs ‚Üí New ‚Üí Workflow and Flow = FINEST
Para Apex:



System.debug(LoggingLevel.INFO, 'üîç Processing: ' + recordId);
Para LWC:



console.log('üé® Component loaded with recordId:', this.recordId);
üìä PIE DE DOCUMENTO
üìå Informaci√≥n del Documento
Versi√≥n: 1.0

Salesforce Release: Spring '25

Fecha Creaci√≥n: [DD/MM/YYYY]

√öltima Actualizaci√≥n: [DD/MM/YYYY]

Pr√≥xima Revisi√≥n: [Fecha + 3 meses]

Elaborado por: [Team/Persona]

üìù Control de Cambios
Versi√≥n

Fecha

Autor

Cambios

1.0

[Fecha]

[Nombre]

Documentaci√≥n inicial

Pregunta final: "¬øFalta alg√∫n aspecto t√©cnico o de negocio para que el equipo pueda mantener y evolucionar esta funcionalidad efectivamente?"

---

IMPORTANTE: Analiza TODOS los archivos del repositorio, identifica componentes Salesforce, y genera documentaci√≥n COMPLETA siguiendo EXACTAMENTE esta estructura. Si existe documentaci√≥n previa en Confluence, actual√≠zala manteniendo historial. Si no existe, crea nueva p√°gina."""

class SalesforceDocumentationGenerator:
    def __init__(self):
        self.anthropic_api_key = os.getenv('ANTHROPIC_API_KEY')
        self.atlassian_email = os.getenv('ATLASSIAN_EMAIL')
        self.atlassian_api_token = os.getenv('ATLASSIAN_API_TOKEN')
        self.atlassian_base_url = os.getenv('ATLASSIAN_BASE_URL')
        self.confluence_space_key = os.getenv('CONFLUENCE_SPACE_KEY')
        
        if not all([self.anthropic_api_key, self.atlassian_email, 
                   self.atlassian_api_token, self.atlassian_base_url, 
                   self.confluence_space_key]):
            print("‚ùå ERROR: Variables de entorno faltantes")
            sys.exit(1)

    def analyze_salesforce_repository(self) -> Dict:
        """Analiza el repositorio y extrae informaci√≥n de componentes Salesforce"""
        salesforce_files = []
        repo_structure = {}
        
        # Patrones de archivos Salesforce
        patterns = {
            'apex_classes': '**/*.cls',
            'apex_triggers': '**/*.trigger',
            'flows': '**/*.flow-meta.xml',
            'lwc_html': '**/lwc/**/*.html',
            'lwc_js': '**/lwc/**/*.js',
            'lwc_css': '**/lwc/**/*.css',
            'objects': '**/*.object-meta.xml',
            'permission_sets': '**/*.permissionset-meta.xml',
            'custom_metadata': '**/*.md-meta.xml'
        }
        
        for component_type, pattern in patterns.items():
            files = list(Path('.').glob(pattern))
            if files:
                repo_structure[component_type] = []
                for file_path in files:
                    try:
                        with open(file_path, 'r', encoding='utf-8') as f:
                            content = f.read()
                        repo_structure[component_type].append({
                            'path': str(file_path),
                            'content': content[:5000]  # Limit content size
                        })
                    except Exception as e:
                        print(f"‚ö†Ô∏è Error leyendo {file_path}: {e}")
        
        return repo_structure

    def call_claude_api(self, repository_data: Dict) -> str:
        """Llama a Claude API para generar documentaci√≥n"""
        
        # Construir contexto del repositorio
        repo_context = "CONTEXTO DEL REPOSITORIO SALESFORCE:\n\n"
        
        for component_type, files in repository_data.items():
            if files:
                repo_context += f"\n## {component_type.upper().replace('_', ' ')}\n"
                for file_info in files:
                    repo_context += f"\n### Archivo: {file_info['path']}\n"
                    repo_context += f"```\n{file_info['content']}\n```\n"
        
        # Prompt completo
        full_prompt = f"{repo_context}\n\n{DOCUMENTATION_PROMPT}"
        
        headers = {
            'Content-Type': 'application/json',
            'x-api-key': self.anthropic_api_key,
            'anthropic-version': '2023-06-01'
        }
        
        payload = {
            'model': 'claude-3-5-sonnet-20240620',
            'max_tokens': 4000,
            'messages': [
                {
                    'role': 'user',
                    'content': full_prompt
                }
            ]
        }
        
        try:
            print("ü§ñ Llamando a Claude API...")
            response = requests.post(
                'https://api.anthropic.com/v1/messages',
                headers=headers,
                json=payload,
                timeout=120
            )
            
            if response.status_code == 200:
                result = response.json()
                return result['content'][0]['text']
            else:
                print(f"‚ùå Error en Claude API: {response.status_code}")
                print(response.text)
                return None
                
        except Exception as e:
            print(f"‚ùå Error llamando Claude API: {e}")
            return None

    def search_confluence_page(self, title: str) -> Optional[str]:
        """Busca si existe una p√°gina en Confluence con el t√≠tulo dado"""
        
        search_url = f"{self.atlassian_base_url}/rest/api/content"
        auth = (self.atlassian_email, self.atlassian_api_token)
        
        params = {
            'type': 'page',
            'spaceKey': self.confluence_space_key,
            'title': title,
            'expand': 'version'
        }
        
        try:
            response = requests.get(search_url, auth=auth, params=params)
            
            if response.status_code == 200:
                results = response.json()
                if results['results']:
                    page_id = results['results'][0]['id']
                    print(f"‚úÖ P√°gina existente encontrada: {title} (ID: {page_id})")
                    return page_id
                else:
                    print(f"‚ÑπÔ∏è No existe p√°gina con t√≠tulo: {title}")
                    return None
            else:
                print(f"‚ö†Ô∏è Error buscando p√°gina: {response.status_code}")
                return None
                
        except Exception as e:
            print(f"‚ùå Error en b√∫squeda Confluence: {e}")
            return None

    def create_confluence_page(self, title: str, content: str) -> bool:
        """Crea una nueva p√°gina en Confluence"""
        
        create_url = f"{self.atlassian_base_url}/rest/api/content"
        auth = (self.atlassian_email, self.atlassian_api_token)
        
        # Convertir markdown a Confluence storage format b√°sico
        confluence_content = self.markdown_to_confluence_storage(content)
        
        payload = {
            'type': 'page',
            'title': title,
            'space': {'key': self.confluence_space_key},
            'body': {
                'storage': {
                    'value': confluence_content,
                    'representation': 'storage'
                }
            }
        }
        
        headers = {'Content-Type': 'application/json'}
        
        try:
            response = requests.post(
                create_url, 
                auth=auth, 
                headers=headers, 
                json=payload
            )
            
            if response.status_code == 200:
                result = response.json()
                page_id = result['id']
                page_url = f"{self.atlassian_base_url}/pages/viewpage.action?pageId={page_id}"
                print(f"‚úÖ Nueva p√°gina creada: {title}")
                print(f"üîó URL: {page_url}")
                return True
            else:
                print(f"‚ùå Error creando p√°gina: {response.status_code}")
                print(response.text)
                return False
                
        except Exception as e:
            print(f"‚ùå Error creando p√°gina en Confluence: {e}")
            return False

    def update_confluence_page(self, page_id: str, title: str, content: str) -> bool:
        """Actualiza una p√°gina existente en Confluence"""
        
        # Primero obtener la versi√≥n actual
        get_url = f"{self.atlassian_base_url}/rest/api/content/{page_id}"
        auth = (self.atlassian_email, self.atlassian_api_token)
        
        params = {'expand': 'version'}
        
        try:
            response = requests.get(get_url, auth=auth, params=params)
            
            if response.status_code != 200:
                print(f"‚ùå Error obteniendo p√°gina: {response.status_code}")
                return False
            
            page_data = response.json()
            current_version = page_data['version']['number']
            
            # Actualizar p√°gina
            update_url = f"{self.atlassian_base_url}/rest/api/content/{page_id}"
            confluence_content = self.markdown_to_confluence_storage(content)
            
            payload = {
                'version': {'number': current_version + 1},
                'title': title,
                'type': 'page',
                'body': {
                    'storage': {
                        'value': confluence_content,
                        'representation': 'storage'
                    }
                }
            }
            
            headers = {'Content-Type': 'application/json'}
            
            response = requests.put(
                update_url, 
                auth=auth, 
                headers=headers, 
                json=payload
            )
            
            if response.status_code == 200:
                page_url = f"{self.atlassian_base_url}/pages/viewpage.action?pageId={page_id}"
                print(f"‚úÖ P√°gina actualizada: {title}")
                print(f"üîó URL: {page_url}")
                print(f"üìä Versi√≥n: {current_version} ‚Üí {current_version + 1}")
                return True
            else:
                print(f"‚ùå Error actualizando p√°gina: {response.status_code}")
                print(response.text)
                return False
                
        except Exception as e:
            print(f"‚ùå Error actualizando p√°gina en Confluence: {e}")
            return False

    def markdown_to_confluence_storage(self, markdown_content: str) -> str:
        """Convierte markdown b√°sico a Confluence Storage Format"""
        
        content = markdown_content
        
        # Headers
        content = re.sub(r'^# (.*?)$', r'<h1>\1</h1>', content, flags=re.MULTILINE)
        content = re.sub(r'^## (.*?)$', r'<h2>\1</h2>', content, flags=re.MULTILINE)
        content = re.sub(r'^### (.*?)$', r'<h3>\1</h3>', content, flags=re.MULTILINE)
        
        # Bold and italic
        content = re.sub(r'\*\*(.*?)\*\*', r'<strong>\1</strong>', content)
        content = re.sub(r'\*(.*?)\*', r'<em>\1</em>', content)
        
        # Code blocks
        content = re.sub(
            r'```(\w+)?\n(.*?)\n```', 
            r'<ac:structured-macro ac:name="code"><ac:parameter ac:name="language">\1</ac:parameter><ac:plain-text-body><![CDATA[\2]]></ac:plain-text-body></ac:structured-macro>', 
            content, 
            flags=re.DOTALL
        )
        
        # Inline code
        content = re.sub(r'`(.*?)`', r'<code>\1</code>', content)
        
        # Lists (b√°sico)
        content = re.sub(r'^- (.*?)$', r'<ul><li>\1</li></ul>', content, flags=re.MULTILINE)
        
        # Line breaks
        content = content.replace('\n', '<br/>')
        
        # Mermaid diagrams (Confluence macro)
        content = re.sub(
            r'```mermaid\n(.*?)\n```',
            r'<ac:structured-macro ac:name="mermaid"><ac:plain-text-body><![CDATA[\1]]></ac:plain-text-body></ac:structured-macro>',
            content,
            flags=re.DOTALL
        )
        
        return content

    def extract_title_from_documentation(self, content: str) -> str:
        """Extrae el t√≠tulo principal de la documentaci√≥n generada"""
        
        # Buscar primer H1
        match = re.search(r'^# (.+?)$', content, re.MULTILINE)
        if match:
            return match.group(1).strip()
        
        # Fallback: usar informaci√≥n del repositorio
        repo_name = os.getenv('GITHUB_REPOSITORY', 'Salesforce Project')
        repo_name = repo_name.split('/')[-1] if '/' in repo_name else repo_name
        return f"Documentaci√≥n T√©cnica - {repo_name}"

    def run(self):
        """Ejecuta el proceso completo de generaci√≥n de documentaci√≥n"""
        
        print("üöÄ Iniciando generaci√≥n autom√°tica de documentaci√≥n Salesforce")
        print("=" * 60)
        
        # 1. Analizar repositorio
        print("\nüìÅ Paso 1: Analizando repositorio Salesforce...")
        repository_data = self.analyze_salesforce_repository()
        
        if not repository_data:
            print("‚ö†Ô∏è No se encontraron archivos Salesforce en el repositorio")
            return False
        
        print(f"‚úÖ Encontrados {len(repository_data)} tipos de componentes")
        for component_type, files in repository_data.items():
            print(f"   - {component_type}: {len(files)} archivos")
        
        # 2. Generar documentaci√≥n con Claude
        print("\nü§ñ Paso 2: Generando documentaci√≥n con Claude...")
        documentation = self.call_claude_api(repository_data)
        
        if not documentation:
            print("‚ùå Error generando documentaci√≥n")
            return False
        
        print(f"‚úÖ Documentaci√≥n generada ({len(documentation)} caracteres)")
        
        # 3. Extraer t√≠tulo
        title = self.extract_title_from_documentation(documentation)
        print(f"üìã T√≠tulo extra√≠do: {title}")
        
        # 4. Buscar p√°gina existente
        print("\nüîç Paso 3: Buscando p√°gina existente en Confluence...")
        existing_page_id = self.search_confluence_page(title)
        
        # 5. Crear o actualizar p√°gina
        print("\nüìù Paso 4: Publicando en Confluence...")
        
        if existing_page_id:
            success = self.update_confluence_page(existing_page_id, title, documentation)
        else:
            success = self.create_confluence_page(title, documentation)
        
        if success:
            print("\nüéâ ¬°Proceso completado exitosamente!")
            print(f"üìä Confluence Space: {self.confluence_space_key}")
            print(f"üìÑ P√°gina: {title}")
            return True
        else:
            print("\n‚ùå Error en el proceso de publicaci√≥n")
            return False

if __name__ == "__main__":
    generator = SalesforceDocumentationGenerator()
    success = generator.run()
    sys.exit(0 if success else 1)
name: ü§ñ Salesforce Auto-Documentation

on:
  push:
    branches: [ main, develop, master ]
    paths:
      # Solo ejecutar cuando hay cambios en archivos Salesforce
      - 'force-app/**'
      - 'src/**'
      - '**/*.cls'
      - '**/*.trigger'
      - '**/*.flow-meta.xml'
      - '**/lwc/**/*.html'
      - '**/lwc/**/*.js'
      - '**/lwc/**/*.css'
      - '**/*.object-meta.xml'
      - '**/*.permissionset-meta.xml'
      - '**/*.md-meta.xml'
      - 'scripts/**'
      - '.github/workflows/**'

  # Permitir ejecuci√≥n manual
  workflow_dispatch:
    inputs:
      force_regenerate:
        description: 'Forzar regeneraci√≥n completa de documentaci√≥n'
        required: false
        default: 'false'
        type: boolean

# Permisos necesarios
permissions:
  contents: read
  actions: write

jobs:
  generate-documentation:
    name: üìù Generar Documentaci√≥n T√©cnica
    runs-on: ubuntu-latest
    
    # Solo ejecutar si no es commit de documentaci√≥n autom√°tica
    if: "!contains(github.event.head_commit.message, '[skip-docs]')"
    
    steps:
      # 1. Checkout del repositorio
      - name: üì¶ Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. Setup Python
      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          #cache: 'pip'

      # 3. Instalar dependencias
      - name: üìö Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests pathlib

      # 4. Verificar variables de entorno
      - name: üîç Verify Environment Variables
        run: |
          echo "‚úÖ Verificando configuraci√≥n..."
          
          if [ -z "${{ secrets.ANTHROPIC_API_KEY }}" ]; then
            echo "‚ùå ANTHROPIC_API_KEY no configurado"
            exit 1
          fi
          
          if [ -z "${{ secrets.ATLASSIAN_EMAIL }}" ]; then
            echo "‚ùå ATLASSIAN_EMAIL no configurado"
            exit 1
          fi
          
          if [ -z "${{ secrets.ATLASSIAN_API_TOKEN }}" ]; then
            echo "‚ùå ATLASSIAN_API_TOKEN no configurado"
            exit 1
          fi
          
          if [ -z "${{ secrets.ATLASSIAN_BASE_URL }}" ]; then
            echo "‚ùå ATLASSIAN_BASE_URL no configurado"
            exit 1
          fi
          
          if [ -z "${{ secrets.CONFLUENCE_SPACE_KEY }}" ]; then
            echo "‚ùå CONFLUENCE_SPACE_KEY no configurado"
            exit 1
          fi
          
          echo "‚úÖ Todas las variables de entorno est√°n configuradas"
          
          # Log de contexto (sin exponer secrets)
          echo "üìã Contexto del workflow:"
          echo "  - Repository: ${{ github.repository }}"
          echo "  - Branch: ${{ github.ref_name }}"
          echo "  - Commit: ${{ github.sha }}"
          echo "  - Actor: ${{ github.actor }}"
          echo "  - Event: ${{ github.event_name }}"

      # 5. Detectar cambios relevantes
      - name: üîç Detect Salesforce Changes
        id: changes
        run: |
          # Obtener archivos cambiados
          if [ "${{ github.event_name }}" = "push" ]; then
            if [ "${{ github.event.before }}" != "0000000000000000000000000000000000000000" ]; then
              CHANGED_FILES=$(git diff --name-only ${{ github.event.before }}..${{ github.sha }} || echo "")
            else
              # Primer push al repositorio
              CHANGED_FILES=$(git ls-tree -r --name-only ${{ github.sha }} || echo "")
            fi
          else
            # Workflow manual - analizar todos los archivos
            CHANGED_FILES=$(find . -name "*.cls" -o -name "*.trigger" -o -name "*.flow-meta.xml" | head -20)
          fi
          
          echo "changed-files<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Verificar si hay archivos Salesforce relevantes
          SALESFORCE_CHANGES=$(echo "$CHANGED_FILES" | grep -E '\.(cls|trigger|flow-meta\.xml|html|js|css|object-meta\.xml|permissionset-meta\.xml|md-meta\.xml)$|force-app/|src/|lwc/' || true)
          
          echo "salesforce-changes<<EOF" >> $GITHUB_OUTPUT
          echo "$SALESFORCE_CHANGES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          if [ -n "$SALESFORCE_CHANGES" ] || [ "${{ github.event.inputs.force_regenerate }}" == "true" ]; then
            echo "has-changes=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Cambios Salesforce detectados:"
            echo "$SALESFORCE_CHANGES" | head -10
          else
            echo "has-changes=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è No hay cambios en archivos Salesforce relevantes"
          fi

      # 6. Generar documentaci√≥n
      - name: ü§ñ Generate Documentation with Claude
        if: steps.changes.outputs.has-changes == 'true'
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          ATLASSIAN_EMAIL: ${{ secrets.ATLASSIAN_EMAIL }}
          ATLASSIAN_API_TOKEN: ${{ secrets.ATLASSIAN_API_TOKEN }}
          ATLASSIAN_BASE_URL: ${{ secrets.ATLASSIAN_BASE_URL }}
          CONFLUENCE_SPACE_KEY: ${{ secrets.CONFLUENCE_SPACE_KEY }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_REF: ${{ github.ref }}
        run: |
          echo "üöÄ Iniciando generaci√≥n de documentaci√≥n..."
          echo "üìä Informaci√≥n del proceso:"
          echo "  - Repositorio: $GITHUB_REPOSITORY"
          echo "  - Commit: $GITHUB_SHA"
          echo "  - Actor: $GITHUB_ACTOR"
          echo "  - Confluence Space: $CONFLUENCE_SPACE_KEY"
          
          # Ejecutar script de documentaci√≥n
          python scripts/generate-documentation.py
          
          # Verificar resultado
          if [ $? -eq 0 ]; then
            echo "‚úÖ Documentaci√≥n generada exitosamente"
          else
            echo "‚ùå Error en la generaci√≥n de documentaci√≥n"
            exit 1
          fi

      # 7. Crear comentario en commit con resultados
      - name: üí¨ Create Commit Comment
        if: always() && steps.changes.outputs.has-changes == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const success = process.env.GENERATION_SUCCESS === 'true';
            const spaceKey = process.env.CONFLUENCE_SPACE_KEY;
            const baseUrl = process.env.ATLASSIAN_BASE_URL;
            
            let commentBody = '';
            
            if ('${{ job.status }}' === 'success') {
              commentBody = `
            ‚úÖ **Documentaci√≥n autom√°tica generada exitosamente**
            
            üìä **Informaci√≥n del proceso:**
            - üïê Timestamp: ${new Date().toISOString()}
            - üè¢ Confluence: ${baseUrl}
            - üìÇ Space: ${spaceKey}
            - ü§ñ Generado con: Claude API
            
            üîç **Archivos procesados:**
            \`\`\`
            ${{ steps.changes.outputs.salesforce-changes }}
            \`\`\`
            
            üìö **Resultado:**
            - ‚úÖ An√°lisis de c√≥digo Salesforce completado
            - ‚úÖ Documentaci√≥n t√©cnica generada/actualizada
            - ‚úÖ Publicaci√≥n en Confluence exitosa
            
            üîó **Ver documentaci√≥n:** [Confluence Workspace](${baseUrl})
              `;
            } else {
              commentBody = `
            ‚ùå **Error en generaci√≥n de documentaci√≥n autom√°tica**
            
            üìä **Informaci√≥n del proceso:**
            - üïê Timestamp: ${new Date().toISOString()}
            - ‚ùå Estado: Error
            - üîß Ver logs del workflow para detalles
            
            üîß **Troubleshooting:**
            - Verificar variables de entorno (ANTHROPIC_API_KEY, ATLASSIAN_*)
            - Revisar permisos de Confluence
            - Comprobar formato de archivos Salesforce
            - Consultar logs detallados en Actions
              `;
            }
            
            try {
              await github.rest.repos.createCommitComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                commit_sha: context.sha,
                body: commentBody
              });
            } catch (error) {
              console.log('Error creando comentario:', error);
            }
        env:
          CONFLUENCE_SPACE_KEY: ${{ secrets.CONFLUENCE_SPACE_KEY }}
          ATLASSIAN_BASE_URL: ${{ secrets.ATLASSIAN_BASE_URL }}

      # 8. Generar resumen del job
      - name: üìä Job Summary
        if: always()
        run: |
          echo "## üìä Salesforce Auto-Documentation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìã Repository Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Actor:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Event:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### üîç Change Detection" >> $GITHUB_STEP_SUMMARY
          echo "- **Has Salesforce Changes:** ${{ steps.changes.outputs.has-changes }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.changes.outputs.has-changes }}" == "true" ]; then
            echo "### ‚úÖ Actions Taken" >> $GITHUB_STEP_SUMMARY
            echo "- ü§ñ Claude API analysis executed" >> $GITHUB_STEP_SUMMARY
            echo "- üìù Documentation generated/updated" >> $GITHUB_STEP_SUMMARY
            echo "- üè¢ Published to Confluence space: ${{ secrets.CONFLUENCE_SPACE_KEY }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üìÅ Processed Files" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "${{ steps.changes.outputs.salesforce-changes }}" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚ÑπÔ∏è No Action Required" >> $GITHUB_STEP_SUMMARY
            echo "- No relevant Salesforce changes detected" >> $GITHUB_STEP_SUMMARY
            echo "- Documentation generation skipped" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üí∞ Cost Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Claude API:** ~$0.50-2.00 per execution" >> $GITHUB_STEP_SUMMARY
          echo "- **GitHub Actions:** Free for public repos" >> $GITHUB_STEP_SUMMARY
          echo "- **Confluence API:** Included in Atlassian subscription" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîó Useful Links" >> $GITHUB_STEP_SUMMARY
          echo "- [Confluence Workspace](${{ secrets.ATLASSIAN_BASE_URL }})" >> $GITHUB_STEP_SUMMARY
          echo "- [Claude API Console](https://console.anthropic.com/)" >> $GITHUB_STEP_SUMMARY
          echo "- [Repository](https://github.com/${{ github.repository }})" >> $GITHUB_STEP_SUMMARY

  # Job de notificaci√≥n (opcional)
  notify-completion:
    name: üîî Notify Completion
    runs-on: ubuntu-latest
    needs: generate-documentation
    if: always() && needs.generate-documentation.result != 'skipped'
    
    steps:
      - name: üìß Send Notification
        run: |
          echo "üìß Proceso de documentaci√≥n completado"
          echo "üìä Estado: ${{ needs.generate-documentation.result }}"
          echo "üîó Workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
          # Aqu√≠ puedes agregar notificaciones adicionales:
          # - Slack webhook
          # - Discord webhook  
          # - Email notification
          # - Microsoft Teams
          
          # Ejemplo Slack (descomenta y configura SLACK_WEBHOOK_URL secret):
          # curl -X POST -H 'Content-type: application/json' \
          #   --data "{\"text\":\"üìù Documentaci√≥n Salesforce actualizada en ${{ github.repository }}\"}" \
          #   ${{ secrets.SLACK_WEBHOOK_URL }}